@extends('Shipper.share.master')

@section('content')
       <div class="bg-light">
      <div class="container" id="orders-container">
        <!-- N√∫t Chuy·ªÉn Trang -->
        <div class="d-flex justify-content-center my-4">
            <button class="btn btn-outline-success mx-2" onclick="togglePages('order')">Th√¥ng tin Qu√°n</button>
            <button class="btn btn-outline-success mx-2" onclick="togglePages('customer')">Th√¥ng tin Kh√°ch h√†ng</button>
        </div>
    </div>

    <script>
        let orders = [];

        function togglePages(type, id = null) {
            document.querySelectorAll(".order-card").forEach(card => {
                const orderSection = card.querySelector(".orderPage");
                const customerSection = card.querySelector(".customerPage");
                if (type === 'order') {
                    orderSection.classList.remove("d-none");
                    customerSection.classList.add("d-none");
                } else {
                    orderSection.classList.add("d-none");
                    customerSection.classList.remove("d-none");
                }
            });
        }

        function createOrderCard(order) {
            const restaurant = order.restaurant;
            const orderDetails = order.order_details;
            const user = order.user || {};
            const location = user.location || {};
            const restaurantLocation = restaurant.locations[0];

            const deliveryFee = order.delivery_fee;
            const orderItemsHTML = orderDetails.map(od => {
                const total = od.quantity_ordered * parseFloat(od.sell_price);
                return `<li class="list-group-item">
                    ${od.menu_item.Title_items} - SL: ${od.quantity_ordered},
                    Gi√°: ${parseFloat(od.sell_price).toLocaleString()} VND,
                    <strong>Th√†nh ti·ªÅn:</strong> ${total.toLocaleString()} VND
                </li>`;
            }).join('');

            const totalAmount = orderDetails.reduce((sum, od) =>
                sum + (parseFloat(od.sell_price) * od.quantity_ordered), 0) + deliveryFee;

            const container = document.createElement("div");
            container.className = "card border-success mb-4 order-card";

            container.innerHTML = `
                <!-- Trang Th√¥ng tin Qu√°n -->
                <div class="orderPage card-header bg-success text-white text-center">
                    <h4>Th√¥ng tin ƒë∆°n h√†ng ${order.id} </h4>
                    <ul class="list-group mb-3">
                        <li class="list-group-item"><strong>T√™n nh√† h√†ng:</strong> ${restaurant.name}</li>
                        <li class="list-group-item"><strong>ƒê·ªãa ch·ªâ:</strong> ${restaurantLocation.Address}, ${restaurantLocation.Ward}, ${restaurantLocation.District}, ${restaurantLocation.City}</li>
                        <li class="list-group-item"><strong>SƒêT:</strong> ${restaurant.PhoneNumber}</li>
                    </ul>
                    <div class="card-body">
                        <h5>Chi ti·∫øt ƒë∆°n h√†ng</h5>
                        <ul class="list-group mb-3">${orderItemsHTML}</ul>
                        <li class="list-group-item"><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ${deliveryFee.toLocaleString()} VND</li>
                        <h5 class="card-title">T·ªïng ti·ªÅn tr·∫£: ${totalAmount.toLocaleString()} VND</h5>
                        <div class="d-flex justify-content-center gap-2">
                            <a class="btn btn-primary" href="tel:${restaurant.PhoneNumber}">G·ªçi</a>
                            <button class="btn btn-success">Chat</button>
                            <button class="btn btn-warning" onclick="acceptOrder(${order.id})">Nh·∫≠n ƒë∆°n</button>
                            <button class="btn btn-danger" onclick="cancelOrder(${order.id})">T·ª´ ch·ªëi ƒë∆°n</button>
                        </div>
                    </div>
                </div>

                <!-- Trang Th√¥ng tin Kh√°ch h√†ng -->
                <div class="customerPage card-body d-none">
                    <h4 class="card-title">Th√¥ng tin Kh√°ch h√†ng</h4>
                    <p><strong>ƒê·ªãa ch·ªâ:</strong> ${location.Address || ''}, ${location.Ward || ''}, ${location.District || ''}, ${location.City || ''}</p>
                    <ul class="list-group mb-3">
                        <li class="list-group-item">T√™n: ${user.username || 'Kh√¥ng c√≥'}</li>
                        <li class="list-group-item">SƒêT: ${user.PhoneNumber || 'Kh√¥ng c√≥'}</li>
                    </ul>
                    <h5>Chi ti·∫øt ƒë∆°n h√†ng</h5>
                    <ul class="list-group mb-3">${orderItemsHTML}</ul>
                    <h5>T·ªïng ti·ªÅn thu: ${totalAmount.toLocaleString()} VND</h5>
                    <div class="d-flex justify-content-center gap-2">
                        <a class="btn btn-info" href="tel:${user.PhoneNumber || ''}">G·ªçi</a>
                        <button class="btn btn-danger">X√≥a th√¥ng tin</button>
                        <button class="btn btn-secondary">L∆∞u thay ƒë·ªïi</button>
                    </div>
                </div>
            `;

            document.getElementById("orders-container").appendChild(container);
        }

        function acceptOrder(orderId) {
            fetch(`/shipper/order/accept/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token() }}'
                }
            })
            .then(res => res.json())
            .then(data => {
                alert(data.message);
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
            })
            .catch(err => console.error(err));
        }

        function cancelOrder(orderId) {
            fetch(`/shipper/order/cancel/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token() }}'
                }
            })
            .then(res => res.json())
            .then(data => {
                alert(data.message);
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
            })
            .catch(err => console.error(err));
        }

        document.addEventListener("DOMContentLoaded", () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    const payload = {
                        lat: position.coords.latitude,
                        lon: position.coords.longitude
                    };

                    fetch("{{ route('shipper.nearby') }}", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': '{{ csrf_token() }}'
                        },
                        body: JSON.stringify(payload)
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.orders && data.orders.length > 0) {
                            orders = data.orders;
                            orders.forEach(order => createOrderCard(order));
                            togglePages('order');
                        } else {
                            alert("Kh√¥ng c√≥ ƒë∆°n h√†ng g·∫ßn b·∫°n.");
                        }
                    })
                    .catch(err => console.error(err));
                });
            }
        });
    </script>

    </div>

@endsection

{{-- <!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Th√¥ng tin ƒê∆°n h√†ng</title>
</head>

<body>
    <h1>Th√¥ng tin ƒë∆°n h√†ng v√† kh√°ch h√†ng</h1>

    <div id="order-info"></div> <!-- ƒê√¢y l√† n∆°i hi·ªÉn th·ªã th√¥ng tin ƒë∆°n h√†ng -->

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("üìç ƒêang ki·ªÉm tra h·ªó tr·ª£ ƒë·ªãnh v·ªã...");

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        const latitude = position.coords.latitude;
                        const longitude = position.coords.longitude;

                        console.log("‚úÖ L·∫•y t·ªça ƒë·ªô th√†nh c√¥ng:");
                        console.log("Latitude:", latitude);
                        console.log("Longitude:", longitude);

                        const payload = {
                            lat: latitude,
                            lon: longitude
                        };

                        console.log("üì¶ Payload g·ª≠i l√™n server:", payload);

                        fetch("{{ route('shipper.nearby') }}", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': '{{ csrf_token() }}'
                            },
                            body: JSON.stringify(payload)
                        })
                            .then(res => res.json())
                            .then(data => {
                                console.log("‚úÖ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ server:", data);
                                if (data.orders && data.orders.length > 0) {
                                    let ordersHtml = '<ul>';
                                    data.orders.forEach(order => {
                                        let restaurant = order.restaurant;
                                        let orderDetails = order.order_details;
                                        let user = order.user || {};
                                        let location = user.location || {};

                                        // X·ª≠ l√Ω danh s√°ch s·∫£n ph·∫©m
                                        let productsHtml = '';
                                        let totalAmount = 0;
                                        orderDetails.forEach(detail => {
                                            let itemTotal = parseFloat(detail.sell_price) * detail.quantity_ordered;
                                            totalAmount += itemTotal;
                                            productsHtml += `
                                                <strong>T√™n s·∫£n ph·∫©m:</strong> ${detail.menu_item.Title_items}<br>
                                                <strong>S·ªë l∆∞·ª£ng:</strong> ${detail.quantity_ordered}<br>
                                                <strong>Gi√° s·∫£n ph·∫©m:</strong> ${detail.sell_price} VNƒê<br>
                                                <strong>T·∫°m t√≠nh:</strong> ${itemTotal.toFixed(2)} VNƒê<br><br>
                                            `;
                                        });

                                        totalAmount += order.delivery_fee;

                                        ordersHtml += `
                                            <li>
                                                <strong>ƒê∆°n h√†ng #${order.id}</strong><br>
                                                <strong>Nh√† h√†ng:</strong> ${restaurant.name}<br>
                                                <strong>ƒê·ªãa ch·ªâ nh√† h√†ng:</strong> ${restaurant.locations[0].Address}, ${restaurant.locations[0].Ward}, ${restaurant.locations[0].District}, ${restaurant.locations[0].City}<br>
                                                <strong>S·ªë ƒëi·ªán tho·∫°i nh√† h√†ng:</strong> ${restaurant.PhoneNumber}<br>
                                                <strong>Email nh√† h√†ng:</strong> ${restaurant.email}<br><br>

                                                <strong>Danh s√°ch s·∫£n ph·∫©m:</strong><br>
                                                ${productsHtml}
                                                <strong>Ph√≠ ship:</strong> ${order.delivery_fee} VNƒê<br>
                                                <strong>Th√†nh ti·ªÅn:</strong> ${totalAmount.toFixed(2)} VNƒê<br>
                                                <strong>Ng√†y ƒë·∫∑t:</strong> ${order.order_date}<br><br>

                                                <strong>Th√¥ng tin kh√°ch h√†ng:</strong><br>
                                                <strong>T√™n kh√°ch h√†ng:</strong> ${user.username || 'Kh√¥ng c√≥'}<br>
                                                <strong>ƒê·ªãa ch·ªâ kh√°ch h√†ng:</strong> ${location.Address || ''}, ${location.Ward || ''}, ${location.District || ''}, ${location.City || ''}<br>
                                                <strong>S·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng:</strong> ${user.PhoneNumber || 'Kh√¥ng c√≥'}<br>
                                                <strong>Email kh√°ch h√†ng:</strong> ${user.email || 'Kh√¥ng c√≥'}<br>
                                            </li>
                                            <hr>
                                        `;
                                    });
                                    ordersHtml += '</ul>';
                                    document.getElementById("order-info").innerHTML = ordersHtml;
                                } else {
                                    document.getElementById("order-info").innerHTML = "Kh√¥ng c√≥ ƒë∆°n h√†ng g·∫ßn b·∫°n.";
                                }
                            })
                            .catch(error => {
                                console.error("‚ùå L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi JSON:", error);
                                alert("ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi server.");
                            });
                    },
                    function (error) {
                        alert('Kh√¥ng th·ªÉ truy c·∫≠p v·ªã tr√≠ c·ªßa b·∫°n! Vui l√≤ng cho ph√©p tr√¨nh duy·ªát.');
                        console.error("‚ùå L·ªói khi l·∫•y v·ªã tr√≠:", error);
                    }
                );
            } else {
                alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã.");
                console.error("‚ö†Ô∏è Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Geolocation API.");
            }
        });
    </script>
</body>

</html> --}}

